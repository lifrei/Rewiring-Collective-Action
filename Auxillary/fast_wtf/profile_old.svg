<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="858" onload="init(evt)" viewBox="0 0 1200 858" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="858" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --native -o profile.svg -- python bench_py_test.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="847.00"> </text><svg id="frames" x="10" width="1180" total_samples="11255"><g><title>test_bench::fibonacci (lib.rs:11) (30 samples, 0.27%)</title><rect x="1.3949%" y="628" width="0.2665%" height="15" fill="rgb(227,0,7)" fg:x="157" fg:w="30"/><text x="1.6449%" y="638.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (16 samples, 0.14%)</title><rect x="1.6615%" y="628" width="0.1422%" height="15" fill="rgb(217,0,24)" fg:x="187" fg:w="16"/><text x="1.9115%" y="638.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (18 samples, 0.16%)</title><rect x="1.8036%" y="628" width="0.1599%" height="15" fill="rgb(221,193,54)" fg:x="203" fg:w="18"/><text x="2.0536%" y="638.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (53 samples, 0.47%)</title><rect x="3.0831%" y="644" width="0.4709%" height="15" fill="rgb(248,212,6)" fg:x="347" fg:w="53"/><text x="3.3331%" y="654.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (20 samples, 0.18%)</title><rect x="3.5540%" y="644" width="0.1777%" height="15" fill="rgb(208,68,35)" fg:x="400" fg:w="20"/><text x="3.8040%" y="654.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (47 samples, 0.42%)</title><rect x="3.7317%" y="644" width="0.4176%" height="15" fill="rgb(232,128,0)" fg:x="420" fg:w="47"/><text x="3.9817%" y="654.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (91 samples, 0.81%)</title><rect x="5.9263%" y="660" width="0.8085%" height="15" fill="rgb(207,160,47)" fg:x="667" fg:w="91"/><text x="6.1763%" y="670.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (50 samples, 0.44%)</title><rect x="6.7348%" y="660" width="0.4442%" height="15" fill="rgb(228,23,34)" fg:x="758" fg:w="50"/><text x="6.9848%" y="670.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (73 samples, 0.65%)</title><rect x="7.1790%" y="660" width="0.6486%" height="15" fill="rgb(218,30,26)" fg:x="808" fg:w="73"/><text x="7.4290%" y="670.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (134 samples, 1.19%)</title><rect x="11.4083%" y="676" width="1.1906%" height="15" fill="rgb(220,122,19)" fg:x="1284" fg:w="134"/><text x="11.6583%" y="686.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (108 samples, 0.96%)</title><rect x="12.5988%" y="676" width="0.9596%" height="15" fill="rgb(250,228,42)" fg:x="1418" fg:w="108"/><text x="12.8488%" y="686.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (97 samples, 0.86%)</title><rect x="13.5584%" y="676" width="0.8618%" height="15" fill="rgb(240,193,28)" fg:x="1526" fg:w="97"/><text x="13.8084%" y="686.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (249 samples, 2.21%)</title><rect x="20.3465%" y="692" width="2.2124%" height="15" fill="rgb(216,20,37)" fg:x="2290" fg:w="249"/><text x="20.5965%" y="702.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:5) (107 samples, 0.95%)</title><rect x="22.5589%" y="692" width="0.9507%" height="15" fill="rgb(206,188,39)" fg:x="2539" fg:w="107"/><text x="22.8089%" y="702.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (171 samples, 1.52%)</title><rect x="23.5096%" y="692" width="1.5193%" height="15" fill="rgb(217,207,13)" fg:x="2646" fg:w="171"/><text x="23.7596%" y="702.50"></text></g><g><title>test_bench::fibonacci (lib.rs:8) (15 samples, 0.13%)</title><rect x="25.0289%" y="692" width="0.1333%" height="15" fill="rgb(231,73,38)" fg:x="2817" fg:w="15"/><text x="25.2789%" y="702.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (284 samples, 2.52%)</title><rect x="33.4340%" y="708" width="2.5233%" height="15" fill="rgb(225,20,46)" fg:x="3763" fg:w="284"/><text x="33.6840%" y="718.50">te..</text></g><g><title>test_bench::fibonacci (lib.rs:5) (190 samples, 1.69%)</title><rect x="35.9574%" y="708" width="1.6881%" height="15" fill="rgb(210,31,41)" fg:x="4047" fg:w="190"/><text x="36.2074%" y="718.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (211 samples, 1.87%)</title><rect x="37.6455%" y="708" width="1.8747%" height="15" fill="rgb(221,200,47)" fg:x="4237" fg:w="211"/><text x="37.8955%" y="718.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:8) (35 samples, 0.31%)</title><rect x="39.5291%" y="708" width="0.3110%" height="15" fill="rgb(226,26,5)" fg:x="4449" fg:w="35"/><text x="39.7791%" y="718.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (292 samples, 2.59%)</title><rect x="49.2936%" y="724" width="2.5944%" height="15" fill="rgb(249,33,26)" fg:x="5548" fg:w="292"/><text x="49.5436%" y="734.50">te..</text></g><g><title>test_bench::fibonacci (lib.rs:5) (248 samples, 2.20%)</title><rect x="51.8880%" y="724" width="2.2035%" height="15" fill="rgb(235,183,28)" fg:x="5840" fg:w="248"/><text x="52.1380%" y="734.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:6) (281 samples, 2.50%)</title><rect x="54.0915%" y="724" width="2.4967%" height="15" fill="rgb(221,5,38)" fg:x="6088" fg:w="281"/><text x="54.3415%" y="734.50">te..</text></g><g><title>test_bench::fibonacci (lib.rs:8) (21 samples, 0.19%)</title><rect x="56.5882%" y="724" width="0.1866%" height="15" fill="rgb(247,18,42)" fg:x="6369" fg:w="21"/><text x="56.8382%" y="734.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (257 samples, 2.28%)</title><rect x="66.1128%" y="740" width="2.2834%" height="15" fill="rgb(241,131,45)" fg:x="7441" fg:w="257"/><text x="66.3628%" y="750.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:5) (208 samples, 1.85%)</title><rect x="68.3963%" y="740" width="1.8481%" height="15" fill="rgb(249,31,29)" fg:x="7698" fg:w="208"/><text x="68.6463%" y="750.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:6) (258 samples, 2.29%)</title><rect x="70.2443%" y="740" width="2.2923%" height="15" fill="rgb(225,111,53)" fg:x="7906" fg:w="258"/><text x="70.4943%" y="750.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:8) (37 samples, 0.33%)</title><rect x="72.5367%" y="740" width="0.3287%" height="15" fill="rgb(238,160,17)" fg:x="8164" fg:w="37"/><text x="72.7867%" y="750.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (177 samples, 1.57%)</title><rect x="79.9911%" y="756" width="1.5726%" height="15" fill="rgb(214,148,48)" fg:x="9003" fg:w="177"/><text x="80.2411%" y="766.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (156 samples, 1.39%)</title><rect x="81.5637%" y="756" width="1.3861%" height="15" fill="rgb(232,36,49)" fg:x="9180" fg:w="156"/><text x="81.8137%" y="766.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (209 samples, 1.86%)</title><rect x="82.9498%" y="756" width="1.8570%" height="15" fill="rgb(209,103,24)" fg:x="9336" fg:w="209"/><text x="83.1998%" y="766.50">t..</text></g><g><title>test_bench::fibonacci (lib.rs:8) (24 samples, 0.21%)</title><rect x="84.8068%" y="756" width="0.2132%" height="15" fill="rgb(229,88,8)" fg:x="9545" fg:w="24"/><text x="85.0568%" y="766.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (90 samples, 0.80%)</title><rect x="89.7468%" y="772" width="0.7996%" height="15" fill="rgb(213,181,19)" fg:x="10101" fg:w="90"/><text x="89.9968%" y="782.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (112 samples, 1.00%)</title><rect x="90.5464%" y="772" width="0.9951%" height="15" fill="rgb(254,191,54)" fg:x="10191" fg:w="112"/><text x="90.7964%" y="782.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (144 samples, 1.28%)</title><rect x="91.5415%" y="772" width="1.2794%" height="15" fill="rgb(241,83,37)" fg:x="10303" fg:w="144"/><text x="91.7915%" y="782.50"></text></g><g><title>test_bench::fibonacci (lib.rs:8) (35 samples, 0.31%)</title><rect x="92.8210%" y="772" width="0.3110%" height="15" fill="rgb(233,36,39)" fg:x="10447" fg:w="35"/><text x="93.0710%" y="782.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (68 samples, 0.60%)</title><rect x="95.9218%" y="788" width="0.6042%" height="15" fill="rgb(226,3,54)" fg:x="10796" fg:w="68"/><text x="96.1718%" y="798.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (45 samples, 0.40%)</title><rect x="96.5260%" y="788" width="0.3998%" height="15" fill="rgb(245,192,40)" fg:x="10864" fg:w="45"/><text x="96.7760%" y="798.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (42 samples, 0.37%)</title><rect x="96.9258%" y="788" width="0.3732%" height="15" fill="rgb(238,167,29)" fg:x="10909" fg:w="42"/><text x="97.1758%" y="798.50"></text></g><g><title>test_bench::fibonacci (lib.rs:8) (12 samples, 0.11%)</title><rect x="97.2990%" y="788" width="0.1066%" height="15" fill="rgb(232,182,51)" fg:x="10951" fg:w="12"/><text x="97.5490%" y="798.50"></text></g><g><title>test_bench::fibonacci (lib.rs:11) (21 samples, 0.19%)</title><rect x="98.4629%" y="804" width="0.1866%" height="15" fill="rgb(231,60,39)" fg:x="11082" fg:w="21"/><text x="98.7129%" y="814.50"></text></g><g><title>test_bench::fibonacci (lib.rs:5) (43 samples, 0.38%)</title><rect x="98.6495%" y="804" width="0.3821%" height="15" fill="rgb(208,69,12)" fg:x="11103" fg:w="43"/><text x="98.8995%" y="814.50"></text></g><g><title>test_bench::fibonacci (lib.rs:6) (26 samples, 0.23%)</title><rect x="99.0315%" y="804" width="0.2310%" height="15" fill="rgb(235,93,37)" fg:x="11146" fg:w="26"/><text x="99.2815%" y="814.50"></text></g><g><title>all (11,255 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (bench_py_test.py:20) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="78.50">&lt;module&gt; (bench_py_test.py:20)</text></g><g><title>test_bench::__pyo3_raw_fibonacci_py (lib.rs:15) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="94.50">test_bench::__pyo3_raw_fibonacci_py (lib.rs:15)</text></g><g><title>pyo3::callback::handle_panic&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt; (callback.rs:245) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(218,138,4)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="110.50">pyo3::callback::handle_panic&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt; (callback.rs:245)</text></g><g><title>std::panic::catch_unwind&lt;pyo3::callback::handle_panic::closure_env$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt;,enum2$&lt;core::result::Result&lt;ptr_mut$&lt;pyo3::ffi::object::PyObject&gt;,pyo3::err::PyErr&gt; &gt; &gt; (panic.rs:146) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(250,191,14)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="126.50">std::panic::catch_unwind&lt;pyo3::callback::handle_panic::closure_env$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt;,enum2$&lt;..</text></g><g><title>std::panicking::try&lt;enum2$&lt;core::result::Result&lt;ptr_mut$&lt;pyo3::ffi::object::PyObject&gt;,pyo3::err::PyErr&gt; &gt;,pyo3::callback::handle_panic::closure_env$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt; &gt; (panicking.rs:516) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(239,60,40)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="142.50">std::panicking::try&lt;enum2$&lt;core::result::Result&lt;ptr_mut$&lt;pyo3::ffi::object::PyObject&gt;,pyo3::err::PyErr&gt; &gt;,pyo3::callback::handle_panic::closure_env$0&lt;test_bench::__pyo..</text></g><g><title>std::panicking::try::do_catch&lt;pyo3::callback::handle_panic::closure_env$0&lt;test_bench::PyInit_test_bench::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt;,enum2$&lt;core::result::Result&lt;ptr_mut$&lt;pyo3::ffi::object::PyObject&gt;,pyo3::err::PyErr&gt; &gt; &gt; (test_bench\test_bench.cp311-win_amd64.pyd) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="158.50">std::panicking::try::do_catch&lt;pyo3::callback::handle_panic::closure_env$0&lt;test_bench::PyInit_test_bench::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt;,enum2$&lt;c..</text></g><g><title>std::panicking::try::do_call&lt;pyo3::callback::handle_panic::closure_env$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt;,enum2$&lt;core::result::Result&lt;ptr_mut$&lt;pyo3::ffi::object::PyObject&gt;,pyo3::err::PyErr&gt; &gt; &gt; (panicking.rs:552) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(225,35,8)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="174.50">std::panicking::try::do_call&lt;pyo3::callback::handle_panic::closure_env$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt;,enu..</text></g><g><title>pyo3::callback::handle_panic::closure$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt; (callback.rs:247) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(250,213,24)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="190.50">pyo3::callback::handle_panic::closure$0&lt;test_bench::__pyo3_raw_fibonacci_py::closure_env$0,ptr_mut$&lt;pyo3::ffi::object::PyObject&gt; &gt; (callback.rs:247)</text></g><g><title>test_bench::__pyo3_raw_fibonacci_py::closure$0 (lib.rs:15) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="196" width="100.0000%" height="15" fill="rgb(247,123,22)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="206.50">test_bench::__pyo3_raw_fibonacci_py::closure$0 (lib.rs:15)</text></g><g><title>test_bench::fibonacci_py (lib.rs:17) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="212" width="100.0000%" height="15" fill="rgb(231,138,38)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="222.50">test_bench::fibonacci_py (lib.rs:17)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="228" width="100.0000%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="238.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="244" width="100.0000%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="254.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="260" width="100.0000%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="270.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="276" width="100.0000%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="286.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="292" width="100.0000%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="302.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="308" width="100.0000%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="318.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="324" width="100.0000%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="334.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="340" width="100.0000%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="350.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="356" width="100.0000%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="366.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="372" width="100.0000%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="382.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="388" width="100.0000%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="398.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="404" width="100.0000%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="414.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="420" width="100.0000%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="430.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="436" width="100.0000%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="446.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="452" width="100.0000%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="462.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="468" width="100.0000%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="478.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,255 samples, 100.00%)</title><rect x="0.0000%" y="484" width="100.0000%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="11255"/><text x="0.2500%" y="494.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,253 samples, 99.98%)</title><rect x="0.0178%" y="500" width="99.9822%" height="15" fill="rgb(244,35,45)" fg:x="2" fg:w="11253"/><text x="0.2678%" y="510.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,250 samples, 99.96%)</title><rect x="0.0444%" y="516" width="99.9556%" height="15" fill="rgb(251,115,12)" fg:x="5" fg:w="11250"/><text x="0.2944%" y="526.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,249 samples, 99.95%)</title><rect x="0.0533%" y="532" width="99.9467%" height="15" fill="rgb(240,54,50)" fg:x="6" fg:w="11249"/><text x="0.3033%" y="542.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,244 samples, 99.90%)</title><rect x="0.0977%" y="548" width="99.9023%" height="15" fill="rgb(233,84,52)" fg:x="11" fg:w="11244"/><text x="0.3477%" y="558.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,231 samples, 99.79%)</title><rect x="0.2132%" y="564" width="99.7868%" height="15" fill="rgb(207,117,47)" fg:x="24" fg:w="11231"/><text x="0.4632%" y="574.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,221 samples, 99.70%)</title><rect x="0.3021%" y="580" width="99.6979%" height="15" fill="rgb(249,43,39)" fg:x="34" fg:w="11221"/><text x="0.5521%" y="590.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,194 samples, 99.46%)</title><rect x="0.5420%" y="596" width="99.4580%" height="15" fill="rgb(209,38,44)" fg:x="61" fg:w="11194"/><text x="0.7920%" y="606.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,155 samples, 99.11%)</title><rect x="0.8885%" y="612" width="99.1115%" height="15" fill="rgb(236,212,23)" fg:x="100" fg:w="11155"/><text x="1.1385%" y="622.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (11,034 samples, 98.04%)</title><rect x="1.9636%" y="628" width="98.0364%" height="15" fill="rgb(242,79,21)" fg:x="221" fg:w="11034"/><text x="2.2136%" y="638.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (10,788 samples, 95.85%)</title><rect x="4.1493%" y="644" width="95.8507%" height="15" fill="rgb(211,96,35)" fg:x="467" fg:w="10788"/><text x="4.3993%" y="654.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (10,373 samples, 92.16%)</title><rect x="7.8365%" y="660" width="92.1635%" height="15" fill="rgb(253,215,40)" fg:x="882" fg:w="10373"/><text x="8.0865%" y="670.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (9,630 samples, 85.56%)</title><rect x="14.4380%" y="676" width="85.5620%" height="15" fill="rgb(211,81,21)" fg:x="1625" fg:w="9630"/><text x="14.6880%" y="686.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (8,423 samples, 74.84%)</title><rect x="25.1622%" y="692" width="74.8378%" height="15" fill="rgb(208,190,38)" fg:x="2832" fg:w="8423"/><text x="25.4122%" y="702.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (6,771 samples, 60.16%)</title><rect x="39.8401%" y="708" width="60.1599%" height="15" fill="rgb(235,213,38)" fg:x="4484" fg:w="6771"/><text x="40.0901%" y="718.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (4,865 samples, 43.23%)</title><rect x="56.7748%" y="724" width="43.2252%" height="15" fill="rgb(237,122,38)" fg:x="6390" fg:w="4865"/><text x="57.0248%" y="734.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (3,054 samples, 27.13%)</title><rect x="72.8654%" y="740" width="27.1346%" height="15" fill="rgb(244,218,35)" fg:x="8201" fg:w="3054"/><text x="73.1154%" y="750.50">test_bench::fibonacci (lib.rs:9)</text></g><g><title>test_bench::fibonacci (lib.rs:9) (1,686 samples, 14.98%)</title><rect x="85.0200%" y="756" width="14.9800%" height="15" fill="rgb(240,68,47)" fg:x="9569" fg:w="1686"/><text x="85.2700%" y="766.50">test_bench::fibonacci (..</text></g><g><title>test_bench::fibonacci (lib.rs:9) (773 samples, 6.87%)</title><rect x="93.1319%" y="772" width="6.8681%" height="15" fill="rgb(210,16,53)" fg:x="10482" fg:w="773"/><text x="93.3819%" y="782.50">test_benc..</text></g><g><title>test_bench::fibonacci (lib.rs:9) (292 samples, 2.59%)</title><rect x="97.4056%" y="788" width="2.5944%" height="15" fill="rgb(235,124,12)" fg:x="10963" fg:w="292"/><text x="97.6556%" y="798.50">te..</text></g><g><title>test_bench::fibonacci (lib.rs:9) (78 samples, 0.69%)</title><rect x="99.3070%" y="804" width="0.6930%" height="15" fill="rgb(224,169,11)" fg:x="11177" fg:w="78"/><text x="99.5570%" y="814.50"></text></g><g><title>test_bench::fibonacci (lib.rs:9) (23 samples, 0.20%)</title><rect x="99.7956%" y="820" width="0.2044%" height="15" fill="rgb(250,166,2)" fg:x="11232" fg:w="23"/><text x="100.0456%" y="830.50"></text></g></svg></svg>